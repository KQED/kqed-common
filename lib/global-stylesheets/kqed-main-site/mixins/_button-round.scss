// important note:
// the PARENT of the element using this mixin...
// needs position: relative, z-index: 1

/*
  The button element itself is just the text
  ::before is the white background
  ::after is the colorful foreground, with variable opacity
*/

$buttonRoundBorderRadius: 53px;
$height: 56px;
$height-mobile: 46px;

@mixin buttonRoundDefault ($inverse: false) {
  display: inline-flex;
  position: relative;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  height: $height-mobile;
  margin: 0 auto;
  padding-right: 25px;
  padding-bottom: 2px;
  padding-left: 25px;
  transition: color $transition-speed;
  font-family: $sans-serif-font;
  font-size: 13px;
  font-weight: 800;
  letter-spacing: 0.3px;
  cursor: pointer;
  border-radius: calc($height-mobile / 2);

  @if $inverse {
    @include palette((
      color highlight
    ));
  } @else { // stylelint-disable-line
    color: white;
    background-color: $color-hot-red;
  }

  @include media-breakpoint-up(md) {
    height: $height;
    font-size: 16px;
    border-radius: calc($height / 2);
  }

  &::before,
  &::after {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: calc($height-mobile / 2);
    content: '';

    @include media-breakpoint-up(md) {
      border-radius: calc($height / 2);
    }
  }

  &::before {
    background-color: $color-white;
    z-index: -2;

    @if $inverse {
      border: none;
    } @else {
      border-width: 1px;
      border-style: solid;
      @include palette((
        border-color highlight
      ));
    }
  }

  &::after {
    transition: opacity $transition-speed;
    z-index: -1;

    @if $inverse {
      opacity: 0;
    } @else { // stylelint-disable-line
      opacity: 1;
    }

    @include palette((
      background-color highlight
    ));
  }

  :global(.icon) {
    :global(.icon-color) {
      transition: fill $transition-speed; // we should use current-color and set color on base element
      fill: currentColor;
    }
  }
}

@mixin buttonRoundHover ($inverse: false) {
  @if $inverse {
    color: white;
  } @else { // stylelint-disable-line
    @include palette((
      color highlight
    ));
    background-color: white;
    border: solid 1px $color-hot-red;
  }

  &::after {
    @if $inverse {
      opacity: 1;
    } @else { // stylelint-disable-line
      opacity: 0;
    }
  }
}

@mixin buttonRoundActive ($inverse: false) {
  @if $inverse {
    color: white;
  } @else { // stylelint-disable-line
    @include palette((
      color highlight
    ));
    background-color: white;
    border: solid 1px $color-hot-red;
  }

  &::after {
    @if $inverse {
      opacity: 0.83;
    } @else { // stylelint-disable-line
      opacity: 0;
    }
  }
}

@mixin buttonRound ($inverse: false) {
  @include buttonRoundDefault($inverse);

  &:hover {
    @include buttonRoundHover($inverse);
  }

  &:focus,
  &:active {
    @include buttonRoundActive($inverse);
  }
}

// Base styles for CTA buttons
@mixin btnRoundDefault ($inverse: false, $highlight: $color-hot-red, $color: white) {
  display: inline-flex;
  position: relative;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  height: $buttonRoundBorderRadius;
  transition: color $transition-speed;
  border-radius: $buttonRoundBorderRadius;
  font-family: $sans-serif-font;
  font-weight: 700;
  letter-spacing: 0.3px;
  cursor: pointer;
  z-index: 5;

  @if $inverse {
    color: $highlight;
  } @else { // stylelint-disable-line
    color: $color;
  }

  &::before,
  &::after {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: $buttonRoundBorderRadius;
    content: '';
  }

  &::before {
    border-width: 1px;
    border-style: solid;
    border-color: $highlight;
    background-color: white;
    z-index: -2;
  }

  &::after {
    transition: opacity $transition-speed;
    background-color: $highlight;
    z-index: -1;

    @if $inverse {
      opacity: 0;
    } @else { // stylelint-disable-line
      opacity: 1;
    }
  }

  :global(.icon) {
    :global(.icon-color) {
      transition: fill $transition-speed; // we should use current-color and set color on base element
      fill: $highlight;
    }
  }
}

@mixin btnRoundHover ($inverse: false, $highlight: $color-hot-red, $color: white) {
  color: $highlight;
  text-decoration: none;

  &::before {
    background-color: white;
  }

  &::after {
    @if $inverse {
      opacity: 0;
    } @else { // stylelint-disable-line
      opacity: 0;
    }
  }

  :global(.icon) {
    :global(.icon-color) {
      transition: fill $transition-speed; // we should use current-color and set color on base element
      fill: $highlight;
    }
  }
}

@mixin btnRoundActive ($inverse: false, $highlight: $color-hot-red, $color: white) {
  color: $highlight;

  &::after {
    @if $inverse {
      opacity: 0.13;
    } @else { // stylelint-disable-line
      opacity: 0;
    }
  }
}

@mixin btnRound ($highlight, $color, $inverse: false) {
  @include btnRoundDefault($inverse, $highlight, $color);

  &:hover {
    @include btnRoundHover($inverse, $highlight, $color);
  }

  &:focus,
  &:active {
    @include btnRoundActive($inverse, $highlight, $color);
  }
}

@mixin btnRoundGhost ($highlight, $color, $inverse: true) {
  @include btnRoundDefault($inverse, $highlight, $color);

  &:hover {
    @include btnRoundHover($inverse, $highlight, $color);
  }

  &:focus,
  &:active {
    @include btnRoundActive($inverse, $highlight, $color);
  }
}
